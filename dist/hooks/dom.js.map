{"version":3,"sources":["../../src/hooks/dom.ts"],"sourcesContent":["import { RefObject, useCallback, useEffect, useRef } from \"react\";\n\nimport { useWindow } from \"@contexts\";\nimport { isInTarget } from \"@lib\";\n\n/**\n * <span style=\"color: #32adff;\">Triggers the callback when user clicks anywhere on the page, except within the\n * defined targets.</span>\n *\n * Preconfigured portals are automatically excluded.\n */\nexport const useClickAnywhere = (callback: () => void, exclude?: (HTMLElement | null)[]) => {\n  const { document } = useWindow();\n\n  useEffect(() => {\n    if (document == null) return;\n\n    const handleClickOutside = (event: MouseEvent) => {\n      const portals = Array.from(document.querySelectorAll(\"[data-portal]\")) as HTMLElement[];\n\n      const canExecute = isInTarget(event, {\n        allowGlobalTarget: true,\n        exclude: [...(exclude || []), ...portals],\n      });\n\n      if (canExecute) callback();\n    };\n\n    document.addEventListener(\"click\", handleClickOutside);\n    return () => document.removeEventListener(\"click\", handleClickOutside);\n  }, [callback, exclude, document]);\n};\n\n/**\n * <span style=\"color: #32adff;\">Code to execute after a resize event was triggered on the target element.</span>\n *\n * The function receives the new dimensions and reference to the target element.\n */\nexport type ResizeCallback =\n  | ((width: number, height: number, target: Element) => void)\n  | ((width: number, height: number) => void)\n  | (() => void);\n\nexport interface ResizeParams {\n  /**\n   * <span style=\"color: #32adff;\">An optional element to watch, instead of the whole window.</span>\n   *\n   * If given, callback will only be triggered if this element size changes.\n   */\n  element?: RefObject<any>;\n  /**\n   * <span style=\"color: #32adff;\">This parameter control which axis to listen for resizing.</span>\n   *\n   * Target refers either to the window object, or the\n   * <span style=\"color: #ffd600;\">{@link element}</span> if given:\n   *  - <span style=\"color: #ff9300;\">\"width\"</span>: only trigger callback when the target width changes.\n   *  - <span style=\"color: #ff9300;\">\"height\"</span>: only trigger callback when the target height changes.\n   *  - <span style=\"color: #ff9300;\">\"both\"</span>: trigger callback when any dimension of the target changes.\n   *\n   * Default value is \"both\".\n   */\n  listen?: \"width\" | \"height\" | \"both\";\n}\n\n/**\n * <span style=\"color: #32adff;\">Triggers a callback everytime the window, or a targeted element, is resized.</span>\n *\n * @example Basic usage\n * import { useResize } from \"@anovel/uikit/hooks\";\n *\n * const MyComponent = () => {\n *   const [width, setWidth] = useState(0);\n *   const [height, setHeight] = useState(0);\n *\n *   const onResize = useCallback(width: number, height: number) => {\n *     setWidth(width);\n *     setHeight(height);\n *   }, []);\n *\n *   useResize(onResize);\n *\n *   return (\n *     <div>\n *       Current body dimensions: {width} x {height}\n *     </div>\n *   );\n * }\n */\nexport const useResize = (callback: ResizeCallback, { element, listen }: ResizeParams = {}) => {\n  // Keep track of the targets dimensions.\n  const dimensions = useRef<{ width: number; height: number }>();\n\n  const { document } = useWindow();\n\n  const resizeObserverCallback = useCallback(\n    (entries: ResizeObserverEntry[]) => {\n      for (const entry of entries) {\n        const { width, height } = entry.target.getBoundingClientRect();\n\n        // Check whether the callback should be triggered or not (depending on the listen parameter).\n        const isWidthDifferent = [\"both\", \"width\", undefined].includes(listen) && width !== dimensions.current?.width;\n        const isHeightDifferent =\n          [\"both\", \"height\", undefined].includes(listen) && height !== dimensions.current?.height;\n\n        if (isWidthDifferent || isHeightDifferent) {\n          // Update the dimensions reference, to use for comparison in future triggers.\n          dimensions.current = { width, height };\n          callback(width, height, entry.target);\n        }\n      }\n    },\n    [callback, listen],\n  );\n\n  useEffect(() => {\n    if (document == null) return;\n\n    const target = element?.current == null ? document.body : element.current;\n    const resizeObserver = new ResizeObserver(resizeObserverCallback);\n\n    resizeObserver.observe(target);\n    return resizeObserver.disconnect;\n  }, [element, resizeObserverCallback, document]);\n};\n"],"names":["useCallback","useEffect","useRef","useWindow","isInTarget","useClickAnywhere","callback","exclude","document","handleClickOutside","event","portals","Array","from","querySelectorAll","canExecute","allowGlobalTarget","addEventListener","removeEventListener","useResize","element","listen","dimensions","resizeObserverCallback","entries","entry","width","height","target","getBoundingClientRect","isWidthDifferent","undefined","includes","current","isHeightDifferent","body","resizeObserver","ResizeObserver","observe","disconnect"],"mappings":"AAAA,OAAoBA,WAAW,CAAEC,SAAS,CAAEC,MAAM,KAAQ,OAAQ,AAElE,QAASC,SAAS,KAAQ,WAAY,AACtC,QAASC,UAAU,KAAQ,MAAO,AAQlC,QAAO,MAAMC,iBAAmB,CAACC,SAAsBC,WACrD,KAAM,CAAEC,QAAQ,CAAE,CAAGL,YAErBF,UAAU,KACR,GAAIO,UAAY,KAAM,OAEtB,MAAMC,mBAAqB,AAACC,QAC1B,MAAMC,QAAUC,MAAMC,IAAI,CAACL,SAASM,gBAAgB,CAAC,kBAErD,MAAMC,WAAaX,WAAWM,MAAO,CACnCM,kBAAmB,KACnBT,QAAS,IAAKA,SAAW,EAAE,IAAMI,QAAQ,AAC3C,GAEA,GAAII,WAAYT,UAClB,EAEAE,SAASS,gBAAgB,CAAC,QAASR,oBACnC,MAAO,IAAMD,SAASU,mBAAmB,CAAC,QAAST,mBACrD,EAAG,CAACH,SAAUC,QAASC,SAAS,CAClC,CAAE,AAyDF,QAAO,MAAMW,UAAY,CAACb,SAA0B,CAAEc,OAAO,CAAEC,MAAM,CAAgB,CAAG,CAAC,CAAC,IAExF,MAAMC,WAAapB,SAEnB,KAAM,CAAEM,QAAQ,CAAE,CAAGL,YAErB,MAAMoB,uBAAyBvB,YAC7B,AAACwB,UACC,IAAK,MAAMC,SAASD,QAAS,CAC3B,KAAM,CAAEE,KAAK,CAAEC,MAAM,CAAE,CAAGF,MAAMG,MAAM,CAACC,qBAAqB,GAG5D,MAAMC,iBAAmB,CAAC,OAAQ,QAASC,UAAU,CAACC,QAAQ,CAACX,SAAWK,QAAUJ,WAAWW,OAAO,EAAEP,MACxG,MAAMQ,kBACJ,CAAC,OAAQ,SAAUH,UAAU,CAACC,QAAQ,CAACX,SAAWM,SAAWL,WAAWW,OAAO,EAAEN,OAEnF,GAAIG,kBAAoBI,kBAAmB,CAEzCZ,WAAWW,OAAO,CAAG,CAAEP,MAAOC,MAAO,EACrCrB,SAASoB,MAAOC,OAAQF,MAAMG,MAAM,CACtC,CACF,CACF,EACA,CAACtB,SAAUe,OAAO,EAGpBpB,UAAU,KACR,GAAIO,UAAY,KAAM,OAEtB,MAAMoB,OAASR,SAASa,SAAW,KAAOzB,SAAS2B,IAAI,CAAGf,QAAQa,OAAO,CACzE,MAAMG,eAAiB,IAAIC,eAAed,wBAE1Ca,eAAeE,OAAO,CAACV,QACvB,OAAOQ,eAAeG,UAAU,AAClC,EAAG,CAACnB,QAASG,uBAAwBf,SAAS,CAChD,CAAE"}