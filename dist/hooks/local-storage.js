import{useCallback,useEffect,useState}from"react";export const useLocalStorageState=(localStorageKey,initialValue,options={})=>{const{replaceIfNull,ignorePreviouslySavedValue}=options;const[value,setValue]=useState(initialValue);const[loaded,setLoaded]=useState(false);const doSetValue=useCallback(setter=>{if(!loaded){console.error("setting localStorage value while being loaded can cause race conditions, and assign an unpredictable value. "+"Please check for the loaded flag to be true before assigning any value.")}setValue(setter);localStorage.setItem(localStorageKey,JSON.stringify(value))},[loaded]);useEffect(()=>{if(loaded)return;setLoaded(true);if(ignorePreviouslySavedValue){localStorage.setItem(localStorageKey,JSON.stringify(initialValue));return}const savedValue=localStorage.getItem(localStorageKey);if(savedValue!=null||replaceIfNull){setValue(savedValue?JSON.parse(savedValue):null)}},[loaded,ignorePreviouslySavedValue,localStorageKey,initialValue,replaceIfNull]);return[value,doSetValue,loaded]};
//# sourceMappingURL=local-storage.js.map