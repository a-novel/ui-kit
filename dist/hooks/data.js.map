{"version":3,"sources":["../../src/hooks/data.ts"],"sourcesContent":["import { useCallback, useEffect, useState } from \"react\";\n\n/**\n * <span style=\"color: #32adff;\">Collection of asynchronous data with unique ids.</span>\n *\n * A data object is a typed promise, that returns the data object asynchronously.\n */\nexport type Collection<Data, ID extends string | number | symbol = string> = Record<ID, Promise<Data | undefined>>;\n\n/**\n * <span style=\"color: #32adff;\">Status metadata for an asynchronous data value.</span>\n *\n * Wrap the data and states of an asynchronous data value, so it can be statically checked.\n */\nexport type CollectionEntryStatus<Data> =\n  | {\n      status: \"no-data\";\n      data?: never;\n    }\n  | {\n      status: \"loading\";\n      data?: Data;\n    }\n  | {\n      status: \"success\";\n      data: Data;\n    }\n  | {\n      status: \"error\";\n      data?: Data;\n      error: unknown;\n    };\n\nexport interface CollectionManagerHook<Data, ID extends string | number | symbol = string> {\n  /**\n   * <span style=\"color: #32adff;\">Current entries in the collection.</span>\n   *\n   * Individual entries can be managed through the\n   * <span style=\"color: #ffd600;\">{@link useCollectionEntryHandler}</span> hook.\n   */\n  entries: Collection<Data, ID>;\n  /**\n   * Delete and reload all entries.\n   */\n  invalidate: () => void;\n}\n\n/**\n * <span style=\"color: #32adff;\">Collection manager invokes an asynchronous data fetching function when any of the given\n * ids changes, only for those ids that have not already been retrieved.</span>\n *\n * You can then handle single entries, with proper status and react state update, through the\n * <span style=\"color: #ffd600;\">{@link useCollectionEntryHandler}</span> hook.\n *\n * Already fetched IDs are retained, even if absent from the ids argument. To clear the list, use the\n * <span style=\"color: #ffd600;\">{@link CollectionManagerHook.invalidate invalidate method}</span>.\n *\n * By the way, changing the reference to the retriever function may cause an infinite rerender loop, so make sure this\n * one is memoized.\n */\nexport const useCollectionManager = <Data, ID extends string | number | symbol = string>(\n  ids: ID[],\n  retriever: (ids: ID[]) => Collection<Data, ID>,\n): CollectionManagerHook<Data, ID> => {\n  const [entries, setEntries] = useState<Collection<Data, ID>>({} as Collection<Data, ID>);\n\n  const update = useCallback(() => {\n    setEntries((prevState) => {\n      const missingEntries = ids.filter((id) => !(id in prevState));\n\n      // No new IDs have been added.\n      // Since we return the same object, it will not trigger a refresh.\n      if (missingEntries.length === 0) return prevState;\n\n      // Initiate query for missing entries.\n      const getEntries = retriever(missingEntries);\n\n      // Create a shallow copy, so react detect the object has changed and triggers a refresh.\n      const newEntries = { ...prevState };\n\n      // Assign each new entry to its id in the collection.\n      missingEntries.forEach((entry) => (newEntries[entry] = getEntries[entry]));\n\n      return newEntries;\n    });\n  }, [ids, retriever]);\n\n  const invalidate = useCallback(() => {\n    setEntries({} as Collection<Data, ID>);\n    update();\n  }, [update]);\n\n  // Trigger a new update every time the update function is updated (when ids or retriever changes).\n  useEffect(() => {\n    update();\n  }, [update]);\n\n  return { entries, invalidate };\n};\n\n/**\n * <span style=\"color: #32adff;\">Wrap a <span style=\"color: #ffd600;\">{@link Collection collection}</span> entry\n * into a <span style=\"color: #ffd600;\">{@link CollectionEntryStatus status}</span> object.</span>\n *\n * Status object captures all the data related to the state of an entry (promise, rejects, etc.), so it can be\n * statically checked.\n */\nexport const useCollectionEntryHandler = <Data, ID extends string | number | symbol = string>(\n  entries: Collection<Data, ID>,\n  key: ID,\n): CollectionEntryStatus<Data> => {\n  const [status, setStatus] = useState<CollectionEntryStatus<Data>>({ status: \"loading\" });\n\n  useEffect(() => {\n    setStatus((prevState) => {\n      // Key has not been initialized yet.\n      if (!(key in entries)) return { status: \"loading\" };\n\n      const currentEntry = entries[key];\n\n      // Key has been initialized, but no associated data was found.\n      if (currentEntry == null) return { status: \"no-data\" };\n\n      // Update state again once promise is resolved.\n      currentEntry\n        .then(() => {\n          setStatus({ status: \"success\", data: entries[key] as Data });\n        })\n        .catch((error) => {\n          setStatus((prevState) => ({ status: \"error\", data: prevState.data, error }));\n        });\n\n      // State has not changed (no update).\n      return prevState;\n    });\n  }, [entries, key]);\n\n  return status;\n};\n"],"names":["useCallback","useEffect","useState","useCollectionManager","ids","retriever","entries","setEntries","update","prevState","missingEntries","filter","id","length","getEntries","newEntries","forEach","entry","invalidate","useCollectionEntryHandler","key","status","setStatus","currentEntry","then","data","catch","error"],"mappings":"AAAA,OAASA,WAAW,CAAEC,SAAS,CAAEC,QAAQ,KAAQ,OAAQ,AA4DzD,QAAO,MAAMC,qBAAuB,CAClCC,IACAC,aAEA,KAAM,CAACC,QAASC,WAAW,CAAGL,SAA+B,CAAC,GAE9D,MAAMM,OAASR,YAAY,KACzBO,WAAW,AAACE,YACV,MAAMC,eAAiBN,IAAIO,MAAM,CAAC,AAACC,IAAO,CAAEA,CAAAA,MAAMH,SAAQ,GAI1D,GAAIC,eAAeG,MAAM,GAAK,EAAG,OAAOJ,UAGxC,MAAMK,WAAaT,UAAUK,gBAG7B,MAAMK,WAAa,CAAE,GAAGN,SAAS,AAAC,EAGlCC,eAAeM,OAAO,CAAC,AAACC,OAAWF,UAAU,CAACE,MAAM,CAAGH,UAAU,CAACG,MAAM,EAExE,OAAOF,UACT,EACF,EAAG,CAACX,IAAKC,UAAU,EAEnB,MAAMa,WAAalB,YAAY,KAC7BO,WAAW,CAAC,GACZC,QACF,EAAG,CAACA,OAAO,EAGXP,UAAU,KACRO,QACF,EAAG,CAACA,OAAO,EAEX,MAAO,CAAEF,QAASY,UAAW,CAC/B,CAAE,AASF,QAAO,MAAMC,0BAA4B,CACvCb,QACAc,OAEA,KAAM,CAACC,OAAQC,UAAU,CAAGpB,SAAsC,CAAEmB,OAAQ,SAAU,GAEtFpB,UAAU,KACRqB,UAAU,AAACb,YAET,GAAI,CAAEW,CAAAA,OAAOd,OAAM,EAAI,MAAO,CAAEe,OAAQ,SAAU,EAElD,MAAME,aAAejB,OAAO,CAACc,IAAI,CAGjC,GAAIG,cAAgB,KAAM,MAAO,CAAEF,OAAQ,SAAU,EAGrDE,aACGC,IAAI,CAAC,KACJF,UAAU,CAAED,OAAQ,UAAWI,KAAMnB,OAAO,CAACc,IAAI,AAAS,EAC5D,GACCM,KAAK,CAAC,AAACC,QACNL,UAAU,AAACb,WAAe,CAAA,CAAEY,OAAQ,QAASI,KAAMhB,UAAUgB,IAAI,CAAEE,KAAM,CAAA,EAC3E,GAGF,OAAOlB,SACT,EACF,EAAG,CAACH,QAASc,IAAI,EAEjB,OAAOC,MACT,CAAE"}