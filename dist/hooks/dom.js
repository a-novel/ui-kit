import{useCallback,useEffect,useRef}from"react";import{useWindow}from"@contexts";import{isInTarget}from"@lib";export const useClickAnywhere=(callback,exclude)=>{const{document}=useWindow();useEffect(()=>{if(document==null)return;const handleClickOutside=event=>{const portals=Array.from(document.querySelectorAll("[data-portal]"));const canExecute=isInTarget(event,{allowGlobalTarget:true,exclude:[...exclude||[],...portals]});if(canExecute)callback()};document.addEventListener("click",handleClickOutside);return()=>document.removeEventListener("click",handleClickOutside)},[callback,exclude,document])};export const useResize=(callback,{element,listen}={})=>{const dimensions=useRef();const{document}=useWindow();const resizeObserverCallback=useCallback(entries=>{for(const entry of entries){const{width,height}=entry.target.getBoundingClientRect();const isWidthDifferent=["both","width",undefined].includes(listen)&&width!==dimensions.current?.width;const isHeightDifferent=["both","height",undefined].includes(listen)&&height!==dimensions.current?.height;if(isWidthDifferent||isHeightDifferent){dimensions.current={width,height};callback(width,height,entry.target)}}},[callback,listen]);useEffect(()=>{if(document==null)return;const target=element?.current==null?document.body:element.current;const resizeObserver=new ResizeObserver(resizeObserverCallback);resizeObserver.observe(target);return resizeObserver.disconnect},[element,resizeObserverCallback,document])};
//# sourceMappingURL=dom.js.map