{"version":3,"sources":["../../src/contexts/event-redirect.tsx"],"sourcesContent":["import { FC, ReactNode, createContext, useCallback, useContext } from \"react\";\n\nimport { usePathname, useRouter } from \"next/navigation\";\n\nimport { useLocalStorageState } from \"@hooks\";\n\nexport interface EventRedirectContextValue {\n  /**\n   * <span style=\"color: #32adff;\">Save the current location, and redirect to the path defined in the context.</span>\n   *\n   * This location can be later retrieved via <span style=\"color: #ffd600;\">{@link loadSavedPath}</span>.\n   */\n  savePathAndRedirect: () => void;\n  /**\n   * <span style=\"color: #32adff;\">Navigate to saved path, and remove it from memory.</span>\n   *\n   * If no path was saved using <span style=\"color: #ffd600;\">{@link savePathAndRedirect}</span>, it will instead\n   * redirect to the fallback path defined in the context.\n   */\n  loadSavedPath: () => void;\n  /**\n   * <span style=\"color: #32adff;\">Indicate the hook is ready to be used.</span>\n   *\n   * It usually takes 1 React cycle for the hook to sync with local data.\n   */\n  loaded: boolean;\n}\n\nexport const EventRedirectContext = createContext<EventRedirectContextValue>({\n  savePathAndRedirect: () => {\n    console.warn(\"EventRedirectContext.savePathAndRedirect was called without a provider.\");\n  },\n  loadSavedPath: () => {\n    console.warn(\"EventRedirectContext.loadSavedPath was called without a provider.\");\n  },\n  loaded: false,\n});\n\nexport const useEventRedirect = () => {\n  return useContext(EventRedirectContext);\n};\n\nexport interface EventRedirectProviderProps {\n  children: ReactNode;\n  /**\n   * <span style=\"color: #32adff;\">Fallback path for\n   * <span style=\"color: #ffd600;\">{@link EventRedirectContextValue.loadSavedPath loadSavedPath}</span>.</span>\n   */\n  fallbackPath: string;\n  /**\n   * <span style=\"color: #32adff;\">Redirection path for\n   * <span style=\"color: #ffd600;\">{@link EventRedirectContextValue.savePathAndRedirect savePathAndRedirect}</span>.</span>\n   */\n  redirectPath: string;\n}\n\n/**\n * <span style=\"color: #32adff;\">Perform temporary redirections, then fallback on the path user was viewing before\n * said redirection.</span>\n *\n * This helps to implement contextual actions, such as temporary login redirection when required, without loosing\n * the action performed by the user before the redirection.\n */\nexport const EventRedirectProvider: FC<EventRedirectProviderProps> = ({ children, redirectPath, fallbackPath }) => {\n  const [_, setSavedPath, loaded] = useLocalStorageState(\"event-redirect-path\", fallbackPath);\n\n  const { push } = useRouter();\n  const pathname = usePathname();\n\n  const savePathAndRedirect = useCallback(() => {\n    setSavedPath(pathname);\n    push(redirectPath);\n  }, [pathname, push]);\n\n  const loadSavedPath = useCallback(() => {\n    setSavedPath((prevPath) => {\n      push(prevPath || fallbackPath);\n      return \"\";\n    });\n  }, [push]);\n\n  return (\n    <EventRedirectContext.Provider value={{ savePathAndRedirect, loadSavedPath, loaded }}>\n      {children}\n    </EventRedirectContext.Provider>\n  );\n};\n"],"names":["createContext","useCallback","useContext","usePathname","useRouter","useLocalStorageState","EventRedirectContext","savePathAndRedirect","console","warn","loadSavedPath","loaded","useEventRedirect","EventRedirectProvider","children","redirectPath","fallbackPath","_","setSavedPath","push","pathname","prevPath","Provider","value"],"mappings":"0CAAA,QAAwBA,aAAa,CAAEC,WAAW,CAAEC,UAAU,KAAQ,OAAQ,AAE9E,QAASC,WAAW,CAAEC,SAAS,KAAQ,iBAAkB,AAEzD,QAASC,oBAAoB,KAAQ,QAAS,AAwB9C,QAAO,MAAMC,qBAAuBN,cAAyC,CAC3EO,oBAAqB,KACnBC,QAAQC,IAAI,CAAC,0EACf,EACAC,cAAe,KACbF,QAAQC,IAAI,CAAC,oEACf,EACAE,OAAQ,KACV,EAAG,AAEH,QAAO,MAAMC,iBAAmB,KAC9B,OAAOV,WAAWI,qBACpB,CAAE,AAuBF,QAAO,MAAMO,sBAAwD,CAAC,CAAEC,QAAQ,CAAEC,YAAY,CAAEC,YAAY,CAAE,IAC5G,KAAM,CAACC,EAAGC,aAAcP,OAAO,CAAGN,qBAAqB,sBAAuBW,cAE9E,KAAM,CAAEG,IAAI,CAAE,CAAGf,YACjB,MAAMgB,SAAWjB,cAEjB,MAAMI,oBAAsBN,YAAY,KACtCiB,aAAaE,UACbD,KAAKJ,aACP,EAAG,CAACK,SAAUD,KAAK,EAEnB,MAAMT,cAAgBT,YAAY,KAChCiB,aAAa,AAACG,WACZF,KAAKE,UAAYL,cACjB,MAAO,EACT,EACF,EAAG,CAACG,KAAK,EAET,OACE,KAACb,qBAAqBgB,QAAQ,EAACC,MAAO,CAAEhB,oBAAqBG,cAAeC,MAAO,WAChFG,UAGP,CAAE"}