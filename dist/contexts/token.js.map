{"version":3,"sources":["../../src/contexts/token.tsx"],"sourcesContent":["import { FC, ReactNode, createContext, useCallback, useContext, useEffect, useState } from \"react\";\n\nexport interface TokenContextValue {\n  token?: string | null;\n  updateToken: (token: string | null) => void;\n}\n\nexport const TokenContext = createContext<TokenContextValue>({\n  token: null,\n  updateToken: () => {\n    console.warn(\"TokenContext.updateToken was called without a provider.\");\n  },\n});\n\nexport const useToken = () => {\n  return useContext(TokenContext);\n};\n\nexport const TokenProvider: FC<{ children: ReactNode }> = ({ children }) => {\n  const [token, setToken] = useState<string | null>();\n\n  // Runs after SSR.\n  useEffect(() => {\n    setToken(localStorage.getItem(\"token\"));\n  }, []);\n\n  const updateToken = useCallback((token: string | null) => {\n    token == null ? localStorage.removeItem(\"token\") : localStorage.setItem(\"token\", token);\n    setToken(token);\n  }, []);\n\n  return <TokenContext.Provider value={{ token, updateToken }}>{children}</TokenContext.Provider>;\n};\n"],"names":["createContext","useCallback","useContext","useEffect","useState","TokenContext","token","updateToken","console","warn","useToken","TokenProvider","children","setToken","localStorage","getItem","removeItem","setItem","Provider","value"],"mappings":"0CAAA,QAAwBA,aAAa,CAAEC,WAAW,CAAEC,UAAU,CAAEC,SAAS,CAAEC,QAAQ,KAAQ,OAAQ,AAOnG,QAAO,MAAMC,aAAeL,cAAiC,CAC3DM,MAAO,KACPC,YAAa,KACXC,QAAQC,IAAI,CAAC,0DACf,CACF,EAAG,AAEH,QAAO,MAAMC,SAAW,KACtB,OAAOR,WAAWG,aACpB,CAAE,AAEF,QAAO,MAAMM,cAA6C,CAAC,CAAEC,QAAQ,CAAE,IACrE,KAAM,CAACN,MAAOO,SAAS,CAAGT,WAG1BD,UAAU,KACRU,SAASC,aAAaC,OAAO,CAAC,SAChC,EAAG,EAAE,EAEL,MAAMR,YAAcN,YAAY,AAACK,QAC/BA,OAAS,KAAOQ,aAAaE,UAAU,CAAC,SAAWF,aAAaG,OAAO,CAAC,QAASX,OACjFO,SAASP,MACX,EAAG,EAAE,EAEL,OAAO,KAACD,aAAaa,QAAQ,EAACC,MAAO,CAAEb,MAAOC,WAAY,WAAIK,UAChE,CAAE"}