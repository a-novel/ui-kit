{"version":3,"sources":["../../../src/components/wrappers/Text.tsx"],"sourcesContent":["import css from \"./Text.module.css\";\n\nimport { DetailedHTMLProps, HTMLAttributes, forwardRef } from \"react\";\n\nimport { Color, ColorIntensity } from \"@components/common\";\n\nexport interface TextProps extends DetailedHTMLProps<HTMLAttributes<HTMLParagraphElement>, HTMLParagraphElement> {\n  /**\n   * <span style=\"color: #32adff;\">Scale the font size.</span>\n   *\n   * If a number is given, the font size will be scaled by that factor relatively to the absolute font size (rem).\n   *\n   * You can also pass any valid CSS length value.\n   */\n  scale?: number | string;\n  /**\n   * <span style=\"color: #32adff;\">Visibility of the text.</span>\n   *\n   * \"primary\" means that the most vivid variant of the colors will be used, while \"dark\" will use more discrete\n   * variants.\n   * Use this parameter to play with the text emphasis.\n   *\n   * Default value is \"primary\".\n   */\n  visibility?: ColorIntensity;\n  /**\n   * <span style=\"color: #32adff;\">Color of the text.</span>\n   *\n   * This parameter automatically combines with the <span style=\"color: #ffd600;\">{@link visibility}</span> parameter,\n   * to apply a preconfigured color to the text.\n   *\n   * Default value is \"default\".\n   */\n  color?: Color;\n  /**\n   * <span style=\"color: #32adff;\">Boldness of the text.</span>\n   *\n   * If true, the text will be displayed in bold.\n   */\n  bold?: boolean;\n  /**\n   * <span style=\"color: #32adff;\">Italic of the text.</span>\n   *\n   * If true, the text will be displayed in italic.\n   */\n  italic?: boolean;\n  /**\n   * <span style=\"color: #32adff;\">Alignment of the text.</span>\n   *\n   * You can choose between \"left\", \"center\" and \"right\".\n   *\n   * Default value is \"left\".\n   */\n  align?: \"left\" | \"center\" | \"right\";\n}\n\n/**\n * <span style=\"color: #32adff;\">Wrap a paragraph element.</span>\n *\n * It allows many of the standard css controls from React props, reducing the need for css files.\n */\nexport const Text = forwardRef<HTMLParagraphElement, TextProps>(function Text(\n  { className, style, scale, visibility, color, bold, italic, align, ...props },\n  externalRef,\n) {\n  return (\n    <p\n      ref={externalRef}\n      className={`\n        ${css.text} \n        ${css[visibility ?? \"primary\"]}\n        ${css[color ?? \"default\"]} \n        ${css[align ?? \"left\"]} \n        ${bold ? css.bold : \"\"} \n        ${italic ? css.italic : \"\"} \n        ${className ?? \"\"}\n      `}\n      style={{\n        ...style,\n        fontSize: scale == null ? undefined : typeof scale === \"number\" ? `${scale}rem` : scale,\n      }}\n      {...props}\n    />\n  );\n});\n\nText.defaultProps = {\n  visibility: \"primary\",\n  align: \"left\",\n};\n\nexport interface TextInlineProps extends DetailedHTMLProps<HTMLAttributes<HTMLSpanElement>, HTMLSpanElement> {\n  /**\n   * <span style=\"color: #32adff;\">Scale the font size.</span>\n   *\n   * If a number is given, the font size will be scaled by that factor relatively to the absolute font size (rem).\n   *\n   * You can also pass any valid CSS length value.\n   */\n  scale?: number | string;\n  /**\n   * <span style=\"color: #32adff;\">Visibility of the text.</span>\n   *\n   * \"primary\" means that the most vivid variant of the colors will be used, while \"dark\" will use more discrete\n   * variants.\n   * Use this parameter to play with the text emphasis.\n   *\n   * Default value is \"primary\".\n   */\n  visibility?: ColorIntensity;\n  /**\n   * <span style=\"color: #32adff;\">Color of the text.</span>\n   *\n   * This parameter automatically combines with the <span style=\"color: #ffd600;\">{@link visibility}</span> parameter,\n   * to apply a preconfigured color to the text.\n   *\n   * Default value is \"default\".\n   */\n  color?: Color;\n  /**\n   * <span style=\"color: #32adff;\">Boldness of the text.</span>\n   *\n   * If true, the text will be displayed in bold.\n   */\n  bold?: boolean;\n  /**\n   * <span style=\"color: #32adff;\">Italic of the text.</span>\n   *\n   * If true, the text will be displayed in italic.\n   */\n  italic?: boolean;\n  /**\n   * <span style=\"color: #32adff;\">Alignment of the text.</span>\n   *\n   * You can choose between \"left\", \"center\" and \"right\".\n   *\n   * Default value is \"left\".\n   */\n  align?: \"left\" | \"center\" | \"right\";\n  /**\n   * <span style=\"color: #32adff;\">Cut the text over a certain amount of characters.</span>\n   *\n   * Line breaks are disabled, as this property requires the text to be displayed on a single line.\n   *\n   * The value may be a boolean (uses the \"ellipsis\" css property), or any valid css value.\n   */\n  ellipsis?: boolean | string;\n}\n\n/**\n * <span style=\"color: #32adff;\">Wrap an inline text element.</span>\n *\n * It allows many of the standard css controls from React props, reducing the need for css files.\n */\nexport const TextInline = forwardRef<HTMLSpanElement, TextInlineProps>(function Text(\n  { className, style, scale, visibility, color, bold, italic, align, ellipsis, ...props },\n  externalRef,\n) {\n  return (\n    <span\n      ref={externalRef}\n      className={`\n        ${css.text} \n        ${css[visibility ?? \"primary\"]}\n        ${css[color ?? \"default\"]} \n        ${css[align ?? \"left\"]} \n        ${bold ? css.bold : \"\"} \n        ${italic ? css.italic : \"\"} \n        ${ellipsis ? css.ellipsis : \"\"} \n        ${className ?? \"\"}\n      `}\n      style={{\n        ...style,\n        fontSize: scale == null ? undefined : typeof scale === \"number\" ? `${scale}rem` : scale,\n        textOverflow: ellipsis != null && typeof ellipsis === \"string\" ? ellipsis : undefined,\n      }}\n      {...props}\n    />\n  );\n});\n\nTextInline.defaultProps = {\n  visibility: \"primary\",\n  align: \"left\",\n};\n\nexport interface TextHeadingProps extends DetailedHTMLProps<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement> {\n  /**\n   * <span style=\"color: #32adff;\">Scale the font size.</span>\n   *\n   * If a number is given, the font size will be scaled by that factor relatively to the absolute font size (rem).\n   *\n   * You can also pass any valid CSS length value.\n   */\n  scale?: number | string;\n  /**\n   * <span style=\"color: #32adff;\">Visibility of the text.</span>\n   *\n   * \"primary\" means that the most vivid variant of the colors will be used, while \"dark\" will use more discrete\n   * variants.\n   * Use this parameter to play with the text emphasis.\n   *\n   * Default value is \"primary\".\n   */\n  visibility?: ColorIntensity;\n  /**\n   * <span style=\"color: #32adff;\">Color of the text.</span>\n   *\n   * This parameter automatically combines with the <span style=\"color: #ffd600;\">{@link visibility}</span> parameter,\n   * to apply a preconfigured color to the text.\n   *\n   * Default value is \"default\".\n   */\n  color?: Color;\n  /**\n   * <span style=\"color: #32adff;\">Boldness of the text.</span>\n   *\n   * If true, the text will be displayed in bold.\n   */\n  bold?: boolean;\n  /**\n   * <span style=\"color: #32adff;\">Italic of the text.</span>\n   *\n   * If true, the text will be displayed in italic.\n   */\n  italic?: boolean;\n  /**\n   * <span style=\"color: #32adff;\">Alignment of the text.</span>\n   *\n   * You can choose between \"left\", \"center\" and \"right\".\n   *\n   * Default value is \"left\".\n   */\n  align?: \"left\" | \"center\" | \"right\";\n  /**\n   * <span style=\"color: #32adff;\">Cut the text over a certain amount of characters.</span>\n   *\n   * Line breaks are disabled, as this property requires the text to be displayed on a single line.\n   *\n   * The value may be a boolean (uses the \"ellipsis\" css property), or any valid css value.\n   */\n  ellipsis?: boolean | string;\n  /**\n   * <span style=\"color: #32adff;\">Level of the heading.</span>\n   *\n   * Controls which tag is gonna be used to render the element.\n   */\n  level: 1 | 2 | 3 | 4 | 5 | 6;\n}\n\n/**\n * <span style=\"color: #32adff;\">Wrap an inline text element.</span>\n *\n * It allows many of the standard css controls from React props, reducing the need for css files.\n */\nexport const TextHeading = forwardRef<HTMLHeadingElement, TextHeadingProps>(function TextHeading(\n  { className, style, scale, visibility, color, bold, italic, align, ellipsis, level, ...props },\n  externalRef,\n) {\n  const Tag = `h${level}` as any;\n\n  return (\n    <Tag\n      ref={externalRef}\n      className={`\n        ${css.text} \n        ${css[visibility ?? \"primary\"]}\n        ${css[color ?? \"default\"]} \n        ${css[align ?? \"left\"]} \n        ${bold ? css.bold : \"\"} \n        ${italic ? css.italic : \"\"} \n        ${ellipsis ? css.ellipsis : \"\"} \n        ${className ?? \"\"}\n      `}\n      style={{\n        ...style,\n        fontSize: scale == null ? undefined : typeof scale === \"number\" ? `${scale}rem` : scale,\n        textOverflow: ellipsis != null && typeof ellipsis === \"string\" ? ellipsis : undefined,\n      }}\n      {...props}\n    />\n  );\n});\n\nTextHeading.defaultProps = {\n  visibility: \"primary\",\n  align: \"left\",\n};\n"],"names":["css","forwardRef","Text","className","style","scale","visibility","color","bold","italic","align","props","externalRef","p","ref","text","fontSize","undefined","defaultProps","TextInline","ellipsis","span","textOverflow","TextHeading","level","Tag"],"mappings":"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"}