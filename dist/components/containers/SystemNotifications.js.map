{"version":3,"sources":["../../../src/components/containers/SystemNotifications.tsx"],"sourcesContent":["import css from \"./SystemNotifications.module.css\";\n\nimport NotificationsEmptyIcon from \"@assets/icons/monochrome/notifications-off.svg\";\n\nimport { ReactNode, forwardRef, useMemo, useState } from \"react\";\nimport { JSX } from \"react/jsx-runtime\";\n\nimport Link from \"next/link\";\n\nimport { Modal } from \"@components/layouts\";\nimport {\n  SystemNotificationContextDefault,\n  SystemNotification as SystemNotificationData,\n  useSystemNotifications,\n} from \"@contexts\";\n\nimport IntrinsicElements = JSX.IntrinsicElements;\n\nexport interface SystemNotificationProps {\n  /**\n   * <span style=\"color: #32adff;\">Content of the notification.</span>\n   *\n   * This value is received from the context.\n   */\n  notification: SystemNotificationData<SystemNotificationContextDefault>;\n}\n\n/**\n * <span style=\"color: #32adff;\">Display a single notification.</span>\n *\n * Display container for system notifications.\n */\nexport const SystemNotification = forwardRef<any, SystemNotificationProps>(function SystemNotification(\n  { notification },\n  externalRef,\n) {\n  const [openInfos, setOpenInfos] = useState(false);\n\n  // Add special css theming when the notification can trigger an action.\n  const isInteractive = notification.context.modal != null || notification.context.href != null;\n\n  const wrapperClassname = `\n    ${css.notificationContainer} \n    ${css[notification.meta.color]} \n    ${isInteractive ? css.interactive : \"\"}\n  `;\n\n  const content = (\n    <>\n      <div className={css.notificationIcon}>{notification.context.icon}</div>\n      <div className={css.notificationText}>\n        <div className={css.notificationTitle}>{notification.context.title}</div>\n        <div className={css.notificationBody}>{notification.context.content}</div>\n      </div>\n    </>\n  );\n\n  if (notification.context.href != null) {\n    return (\n      <Link ref={externalRef} href={notification.context.href} className={wrapperClassname}>\n        {content}\n      </Link>\n    );\n  }\n\n  return (\n    <>\n      <div\n        ref={externalRef}\n        onClick={notification.context.modal && (() => setOpenInfos(true))}\n        className={wrapperClassname}\n      >\n        {content}\n      </div>\n      {notification.context.modal && (\n        <Modal {...notification.context.modal} onClose={() => setOpenInfos(false)} opened={openInfos} />\n      )}\n    </>\n  );\n});\n\n/**\n * <span style=\"color: #32adff;\">Display multiple notifications.</span>\n *\n * Wrapper for multiple notifications.\n */\nexport const SystemNotificationsList = forwardRef<HTMLDivElement, IntrinsicElements[\"div\"]>(function NotificationsList(\n  { className, ...props },\n  externalRef,\n) {\n  return <div ref={externalRef} className={`${css.notificationsList} ${className ?? \"\"}`} {...props} />;\n});\n\nexport interface SystemNotificationsCategoryProps {\n  notifications: Record<string, SystemNotificationData<SystemNotificationContextDefault>>;\n  title: string;\n}\n\n/**\n * <span style=\"color: #32adff;\">Display a category of notifications.</span>\n *\n * Expand the <span style=\"color: #ffd600;\">{@link SystemNotificationsList notifications list}</span> with a title and\n * metadata.\n */\nexport const SystemNotificationsCategory = forwardRef<HTMLDivElement, SystemNotificationsCategoryProps>(\n  function SystemNotificationsCategory({ notifications, title }, externalRef) {\n    const notificationsCount = useMemo(() => Object.keys(notifications).length, [notifications]);\n    const renderedNotifications = useMemo(\n      () =>\n        Object.entries(notifications).map(([key, notification]) => (\n          <SystemNotification key={key} notification={notification} />\n        )),\n      [notifications],\n    );\n\n    if (notificationsCount === 0) return null;\n\n    return (\n      <div ref={externalRef} className={css.notificationsCategory}>\n        <div className={css.notificationsCategoryTitle}>\n          {title} - {notificationsCount}\n        </div>\n        <SystemNotificationsList>{renderedNotifications}</SystemNotificationsList>\n      </div>\n    );\n  },\n);\n\nexport interface SystemNotificationsPlaceholderProps {\n  placeholderText: ReactNode;\n}\n\nconst SystemNotificationsPlaceholder = forwardRef<HTMLDivElement, SystemNotificationsPlaceholderProps>(\n  function NotificationsPlaceholder({ placeholderText }, externalRef) {\n    return (\n      <div ref={externalRef} className={css.notificationsContainerPlaceholder}>\n        <div className={css.notificationsPlaceholderIcon}>\n          <NotificationsEmptyIcon />\n        </div>\n        <div className={css.notificationsPlaceholderText}>{placeholderText}</div>\n      </div>\n    );\n  },\n);\n\nexport interface SystemNotificationsMenuProps {}\n\nexport const SystemNotificationsMenu = forwardRef<HTMLDivElement, SystemNotificationsMenuProps>(\n  function SystemNotificationsMenu({}, externalRef) {\n    const { notifications, updateNotification } = useSystemNotifications();\n\n    return null;\n  },\n);\n"],"names":["css","NotificationsEmptyIcon","forwardRef","useMemo","useState","JSX","Link","Modal","useSystemNotifications","SystemNotification","notification","externalRef","openInfos","setOpenInfos","isInteractive","context","modal","href","wrapperClassname","notificationContainer","meta","color","interactive","content","div","className","notificationIcon","icon","notificationText","notificationTitle","title","notificationBody","ref","onClick","onClose","opened","SystemNotificationsList","NotificationsList","props","notificationsList","SystemNotificationsCategory","notifications","notificationsCount","Object","keys","length","renderedNotifications","entries","map","key","notificationsCategory","notificationsCategoryTitle","SystemNotificationsPlaceholder","NotificationsPlaceholder","placeholderText","notificationsContainerPlaceholder","notificationsPlaceholderIcon","notificationsPlaceholderText","SystemNotificationsMenu","updateNotification"],"mappings":"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"}