{"version":3,"sources":["../../src/lib/fetch.ts"],"sourcesContent":["import { APIError, joinErrors } from \"./errors\";\n\n/**\n * <span style=\"color: #32adff;\">Returns a pre-configured <span style=\"color: #ffd600;\">{@link RequestInit}</span>\n * object for all <span style=\"color: #ffd600;\">{@link fetch}</span> requests.</span>\n *\n * Method and token are automatically added to the correct place.\n */\nexport const requestInit = (token?: string, method: string = \"GET\"): RequestInit => ({\n  headers: { \"Content-Type\": \"application/json\", Authorization: token ?? \"\" },\n  method,\n  mode: \"cors\",\n  credentials: \"omit\",\n});\n\n/**\n * <span style=\"color: #32adff;\">Returns a pre-configured <span style=\"color: #ffd600;\">{@link RequestInit}</span>\n * object for all <span style=\"color: #ffd600;\">{@link fetch}</span> requests, with a JSON body.</span>\n *\n * Body is automatically stringified.\n */\nexport const postRequestInit = (data: any, method: string = \"POST\", token?: string): RequestInit => ({\n  ...requestInit(token, method),\n  body: JSON.stringify(data),\n});\n\n/**\n * <span style=\"color: #32adff;\">Automatically parse a <span style=\"color: #ffd600;\">{@link Response fetch response}</span>\n * into a JSON object, and throw an <span style=\"color: #ffd600;\">{@link APIError}</span> if the response is not\n * <span style=\"color: #ffd600;\">{@link Response.ok OK}</span>.<span style=\"color: #32adff;\">\n *\n * This function panics if the response body is empty. To handle empty responses, use\n * <span style=\"color: #ffd600;\">{@link handleOptionalResponse}</span>.\n */\nexport const handleResponse = async <T>(response: Response): Promise<T> => {\n  if (!response.ok) {\n    throw new APIError(response);\n  }\n\n  return response.json();\n};\n\n/**\n * <span style=\"color: #32adff;\">Automatically parse a <span style=\"color: #ffd600;\">{@link Response fetch response}</span>\n * into a JSON object, and throw an <span style=\"color: #ffd600;\">{@link APIError}</span> if the response is not\n * <span style=\"color: #ffd600;\">{@link Response.ok OK}</span>.<span style=\"color: #32adff;\">\n *\n * Does not panic if the response body is empty. To prevent empty responses, use\n * <span style=\"color: #ffd600;\">{@link handleResponse}</span>.\n */\nexport const handleOptionalResponse = async <T>(response: Response): Promise<T | undefined> => {\n  if (!response.ok) {\n    throw new APIError(response);\n  }\n\n  if (response.body == null) return undefined;\n\n  const text = await response.text();\n  if (text === \"\") return undefined;\n\n  try {\n    return JSON.parse(text);\n  } catch (e) {\n    throw joinErrors(`Failed to parse response body: ${text}`, e);\n  }\n};\n\n/**\n * <span style=\"color: #32adff;\">Callback that returns any value in a set of generic values.</span>\n *\n * The T type is an array of possible return values, for all the set callbacks.\n */\nexport type SwitchResponseCallback<T extends any[]> = (response: Response) => Promise<T[number]>;\n\nexport type SwitchResponse<T extends any[]> = SwitchResponseCallback<T> | T[number];\n\nconst isSwitchResponseCallback = <T extends any[]>(action: SwitchResponse<T>): action is SwitchResponseCallback<T> =>\n  typeof action === \"function\";\n\n/**\n * <span style=\"color: #32adff;\">Handle <span style=\"color: #ffd600;\">{@link Response fetch response}</span>\n * depending on the returned <span style=\"color: #ffd600;\">{@link Response.status status code}</span>.</span>\n *\n * If the status codee does not match any of the provided actions,\n * an <span style=\"color: #ffd600;\">{@link APIError}</span> is thrown.\n *\n * @example\n *  // Return value is automatically resolved as Promise<null | X | typeof DefaultValue>.\n *  const response = await fetch(...).then(handleSwitchResponse({\n *    404: null,\n *    200: (response) => response.json() as Promise<X>,\n *    204: DefaultValue,\n *  });\n */\nexport const handleSwitchResponse =\n  <T extends any[]>(actions: Record<number, SwitchResponse<T>>) =>\n  async (response: Response): Promise<T[number]> => {\n    for (const [status, action] of Object.entries(actions)) {\n      if (response.status === Number(status)) {\n        return isSwitchResponseCallback(action) ? action(response) : action;\n      }\n    }\n\n    throw new APIError(response);\n  };\n\nexport type QueryParams = Record<string, any>;\n\n/**\n * <span style=\"color: #32adff;\">Generate a URL builder for a given API.</span>\n */\nexport const generateURLBuilder =\n  (base: string) =>\n  (path: string, query?: QueryParams): URL => {\n    const url = new URL(path, base);\n\n    Object.entries(query || {}).forEach(([key, value]) =>\n      Array.isArray(value)\n        ? value.forEach((subValue) => url.searchParams.append(key, `${subValue}`))\n        : value != null && url.searchParams.append(key, `${value}`),\n    );\n\n    return url;\n  };\n\n/**\n * <span style=\"color: #32adff;\">Generic return response for an infinite query result.</span>\n *\n * Having a standardized response helps building handlers for infinite queries.\n */\nexport interface SearchResult<T> {\n  /**\n   * Collection of elements returned by the last query call.\n   */\n  res: T[];\n  /**\n   * Total number of elements in the <b>whole collection</b>.\n   */\n  total: number;\n}\n"],"names":["APIError","joinErrors","requestInit","token","method","headers","Authorization","mode","credentials","postRequestInit","data","body","JSON","stringify","handleResponse","response","ok","json","handleOptionalResponse","undefined","text","parse","e","isSwitchResponseCallback","action","handleSwitchResponse","actions","status","Object","entries","Number","generateURLBuilder","base","path","query","url","URL","forEach","key","value","Array","isArray","subValue","searchParams","append"],"mappings":"AAAA,OAASA,QAAQ,CAAEC,UAAU,KAAQ,UAAW,AAQhD,QAAO,MAAMC,YAAc,CAACC,MAAgBC,OAAiB,KAAK,GAAmB,CAAA,CACnFC,QAAS,CAAE,eAAgB,mBAAoBC,cAAeH,OAAS,EAAG,EAC1EC,OACAG,KAAM,OACNC,YAAa,MACf,CAAA,CAAG,AAQH,QAAO,MAAMC,gBAAkB,CAACC,KAAWN,OAAiB,MAAM,CAAED,QAAiC,CAAA,CACnG,GAAGD,YAAYC,MAAOC,OAAO,CAC7BO,KAAMC,KAAKC,SAAS,CAACH,KACvB,CAAA,CAAG,AAUH,QAAO,MAAMI,eAAiB,MAAUC,WACtC,GAAI,CAACA,SAASC,EAAE,CAAE,CAChB,MAAM,IAAIhB,SAASe,SACrB,CAEA,OAAOA,SAASE,IAAI,EACtB,CAAE,AAUF,QAAO,MAAMC,uBAAyB,MAAUH,WAC9C,GAAI,CAACA,SAASC,EAAE,CAAE,CAChB,MAAM,IAAIhB,SAASe,SACrB,CAEA,GAAIA,SAASJ,IAAI,EAAI,KAAM,OAAOQ,UAElC,MAAMC,KAAO,MAAML,SAASK,IAAI,GAChC,GAAIA,OAAS,GAAI,OAAOD,UAExB,GAAI,CACF,OAAOP,KAAKS,KAAK,CAACD,KACpB,CAAE,MAAOE,EAAG,CACV,MAAMrB,WAAW,CAAC,+BAA+B,EAAEmB,KAAK,CAAC,CAAEE,EAC7D,CACF,CAAE,CAWF,MAAMC,yBAA2B,AAAkBC,QACjD,OAAOA,SAAW,UAiBpB,QAAO,MAAMC,qBACX,AAAkBC,SAClB,MAAOX,WACL,IAAK,KAAM,CAACY,OAAQH,OAAO,GAAII,OAAOC,OAAO,CAACH,SAAU,CACtD,GAAIX,SAASY,MAAM,GAAKG,OAAOH,QAAS,CACtC,OAAOJ,yBAAyBC,QAAUA,OAAOT,UAAYS,MAC/D,CACF,CAEA,MAAM,IAAIxB,SAASe,SACrB,CAAE,AAOJ,QAAO,MAAMgB,mBACX,AAACC,MACD,CAACC,KAAcC,SACb,MAAMC,IAAM,IAAIC,IAAIH,KAAMD,MAE1BJ,OAAOC,OAAO,CAACK,OAAS,CAAC,GAAGG,OAAO,CAAC,CAAC,CAACC,IAAKC,MAAM,GAC/CC,MAAMC,OAAO,CAACF,OACVA,MAAMF,OAAO,CAAC,AAACK,UAAaP,IAAIQ,YAAY,CAACC,MAAM,CAACN,IAAK,CAAC,EAAEI,SAAS,CAAC,GACtEH,OAAS,MAAQJ,IAAIQ,YAAY,CAACC,MAAM,CAACN,IAAK,CAAC,EAAEC,MAAM,CAAC,GAG9D,OAAOJ,GACT,CAAE"}