{"version":3,"sources":["../../src/lib/collections.ts"],"sourcesContent":["export type FillFN<T> = (index: number, array: T[]) => T;\n\nconst isFillFN = <T>(fill: T | FillFN<T>): fill is FillFN<T> => typeof fill === \"function\";\n\n/**\n * <span style=\"color: #32adff;\">Generate a new <span style=\"color: #ffd600;\">{@link Array}</span>, and fill it\n * automatically.</span>\n *\n * The fill parameter can be a function, that takes takes the index of the current element, and the array itself.\n */\nexport const newArray = <T>(length: number, fill: T | FillFN<T>): T[] => {\n  const array = new Array<T>(length);\n  for (let i = 0; i < length; i++) array[i] = isFillFN(fill) ? fill(i, array) : fill;\n  return array;\n};\n\n/**\n * <span style=\"color: #32adff;\">Convert a <span style=\"color: #ffd600;\">{@link Set}</span> to a regular\n * <span style=\"color: #ffd600;\">{@link Array}</span>.</span>\n *\n * Element order is preserved.\n */\nexport const setToArray = <T>(set: Set<T>): T[] => {\n  const array: T[] = [];\n  set.forEach((value) => array.push(value));\n  return array;\n};\n"],"names":["isFillFN","fill","newArray","length","array","Array","i","setToArray","set","forEach","value","push"],"mappings":"AAEA,MAAMA,SAAW,AAAIC,MAA2C,OAAOA,OAAS,UAQhF,QAAO,MAAMC,SAAW,CAAIC,OAAgBF,QAC1C,MAAMG,MAAQ,IAAIC,MAASF,QAC3B,IAAK,IAAIG,EAAI,EAAGA,EAAIH,OAAQG,IAAKF,KAAK,CAACE,EAAE,CAAGN,SAASC,MAAQA,KAAKK,EAAGF,OAASH,KAC9E,OAAOG,KACT,CAAE,AAQF,QAAO,MAAMG,WAAa,AAAIC,MAC5B,MAAMJ,MAAa,EAAE,CACrBI,IAAIC,OAAO,CAAC,AAACC,OAAUN,MAAMO,IAAI,CAACD,QAClC,OAAON,KACT,CAAE"}