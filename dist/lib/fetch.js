import{APIError,joinErrors}from"./errors";export const requestInit=(token,method="GET")=>({headers:{"Content-Type":"application/json",Authorization:token??""},method,mode:"cors",credentials:"omit"});export const postRequestInit=(data,method="POST",token)=>({...requestInit(token,method),body:JSON.stringify(data)});export const handleResponse=async response=>{if(!response.ok){throw new APIError(response)}return response.json()};export const handleOptionalResponse=async response=>{if(!response.ok){throw new APIError(response)}if(response.body==null)return undefined;const text=await response.text();if(text==="")return undefined;try{return JSON.parse(text)}catch(e){throw joinErrors(`Failed to parse response body: ${text}`,e)}};const isSwitchResponseCallback=action=>typeof action==="function";export const handleSwitchResponse=actions=>async response=>{for(const[status,action]of Object.entries(actions)){if(response.status===Number(status)){return isSwitchResponseCallback(action)?action(response):action}}throw new APIError(response)};export const generateURLBuilder=base=>(path,query)=>{const url=new URL(path,base);Object.entries(query||{}).forEach(([key,value])=>Array.isArray(value)?value.forEach(subValue=>url.searchParams.append(key,`${subValue}`)):value!=null&&url.searchParams.append(key,`${value}`));return url};
//# sourceMappingURL=fetch.js.map