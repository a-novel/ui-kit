{"version":3,"sources":["../../src/lib/number.ts"],"sourcesContent":["/**\n * <span style=\"color: #32adff;\">Represents a unit value for a shortened number.</span>\n *\n * A unit is a combination of a symbol, and a threshold for this symbol to be used.\n * For example, [1000, \"k\"] means that if the number is greater than or equal to 1000, the symbol \"k\" will be used.\n */\nexport type Unit = [threshold: number, symbol: string];\n\n/**\n * Representation of metric <span style=\"color: #ffd600;\">{@link Unit}</span>.\n */\nexport const METRIC_UNITS = [\n  [1000000000, \"b\"],\n  [1000000, \"m\"],\n  [1000, \"k\"],\n] as Unit[];\n\n/**\n * <span style=\"color: #32adff;\">Trim large numbers using units.</span>\n *\n * If the number exceeds a certain threshold, it is divided by that threshold value then rounded.\n * A unit is added to the returned string, to account for the trimmed part.\n *\n * @example\n *  shortenNumber(1234) // \"1k\"\n */\nexport const shortenNumber = (n: number, units: Unit[] = METRIC_UNITS): string => {\n  // Use absolute value to determine unit.\n  const absN = Math.abs(n);\n  const sign = n < 0 ? \"-\" : \"\";\n\n  const target = units.find((x) => x[0] <= absN);\n\n  if (!target) {\n    return n.toString();\n  }\n\n  const [unit, suffix] = target;\n  return `${sign}${Math.floor(absN / Number(unit))}${suffix}`;\n};\n"],"names":["METRIC_UNITS","shortenNumber","n","units","absN","Math","abs","sign","target","find","x","toString","unit","suffix","floor","Number"],"mappings":"AAWA,OAAO,MAAMA,aAAe,CAC1B,CAAC,IAAY,IAAI,CACjB,CAAC,IAAS,IAAI,CACd,CAAC,IAAM,IAAI,CACZ,AAAW,AAWZ,QAAO,MAAMC,cAAgB,CAACC,EAAWC,MAAgBH,YAAY,IAEnE,MAAMI,KAAOC,KAAKC,GAAG,CAACJ,GACtB,MAAMK,KAAOL,EAAI,EAAI,IAAM,GAE3B,MAAMM,OAASL,MAAMM,IAAI,CAAC,AAACC,GAAMA,CAAC,CAAC,EAAE,EAAIN,MAEzC,GAAI,CAACI,OAAQ,CACX,OAAON,EAAES,QAAQ,EACnB,CAEA,KAAM,CAACC,KAAMC,OAAO,CAAGL,OACvB,MAAO,CAAC,EAAED,KAAK,EAAEF,KAAKS,KAAK,CAACV,KAAOW,OAAOH,OAAO,EAAEC,OAAO,CAAC,AAC7D,CAAE"}