{"version":3,"sources":["../../src/lib/dom.ts"],"sourcesContent":["import { Dispatch, Ref, SetStateAction, UIEvent } from \"react\";\n\nconst isNode = (node: unknown): node is Node =>\n  node != null && typeof node === \"object\" && \"nodeType\" in node && node.nodeType === Node.ELEMENT_NODE;\n\nconst isMatchingNode = (node: Node, nodes: (HTMLElement | null)[]): boolean =>\n  nodes.some((ref) => ref && (ref.contains(node) || ref === node));\n\nexport interface FilterTargetOptions {\n  /**\n   * <span style=\"color: #32adff;\">Prevent some elements from being matched.</span>\n   *\n   * When an element is excluded, all its children are excluded as well.\n   */\n  exclude?: (HTMLElement | null)[];\n  /**\n   * <span style=\"color: #32adff;\">Allow some elements to be matched.</span>\n   *\n   * When an element is allowed, all its children are allowed as well.\n   *\n   * If the element is a children of an <span style=\"color: #ffd600;\">{@link FilterTargetOptions.exclude exclude}</span>\n   * node, it will be ignored.\n   */\n  allow?: (HTMLElement | null)[];\n  /**\n   * <span style=\"color: #32adff;\">Matches any click by default, even on nn-node targets.</span>\n   *\n   * This is useful for targeting any click by default on the page.\n   */\n  allowGlobalTarget?: boolean;\n}\n\n/**\n * <span style=\"color: #32adff;\">Check if the target of an event matches a given filter.</span>\n */\nexport const isInTarget = <E extends Event | UIEvent>(event: E, options: FilterTargetOptions) => {\n  if (isNode(event.target)) {\n    if (options.exclude && isMatchingNode(event.target, options.exclude)) return false;\n    if (options.allow && !isMatchingNode(event.target, options.allow)) return false;\n  } else if (!options.allowGlobalTarget) {\n    return false;\n  }\n\n  return true;\n};\n\n/**\n * <span style=\"color: #32adff;\">Set multiple refs at once.</span>\n */\nexport const setRefs =\n  <T>(...setters: (Ref<T> | null | undefined | Dispatch<SetStateAction<T | null>>)[]): Ref<T> =>\n  (node: T) => {\n    for (const setter of setters) {\n      if (setter == null) continue;\n      else if (typeof setter === \"function\") setter(node);\n      else Object.assign(setter, { current: node });\n    }\n  };\n"],"names":["isNode","node","nodeType","Node","ELEMENT_NODE","isMatchingNode","nodes","some","ref","contains","isInTarget","event","options","target","exclude","allow","allowGlobalTarget","setRefs","setters","setter","Object","assign","current"],"mappings":"AAEA,MAAMA,OAAS,AAACC,MACdA,MAAQ,MAAQ,OAAOA,OAAS,UAAY,aAAcA,MAAQA,KAAKC,QAAQ,GAAKC,KAAKC,YAAY,CAEvG,MAAMC,eAAiB,CAACJ,KAAYK,QAClCA,MAAMC,IAAI,CAAC,AAACC,KAAQA,KAAQA,CAAAA,IAAIC,QAAQ,CAACR,OAASO,MAAQP,IAAG,EA6B/D,QAAO,MAAMS,WAAa,CAA4BC,MAAUC,WAC9D,GAAIZ,OAAOW,MAAME,MAAM,EAAG,CACxB,GAAID,QAAQE,OAAO,EAAIT,eAAeM,MAAME,MAAM,CAAED,QAAQE,OAAO,EAAG,OAAO,MAC7E,GAAIF,QAAQG,KAAK,EAAI,CAACV,eAAeM,MAAME,MAAM,CAAED,QAAQG,KAAK,EAAG,OAAO,KAC5E,MAAO,GAAI,CAACH,QAAQI,iBAAiB,CAAE,CACrC,OAAO,KACT,CAEA,OAAO,IACT,CAAE,AAKF,QAAO,MAAMC,QACX,CAAI,GAAGC,UACP,AAACjB,OACC,IAAK,MAAMkB,UAAUD,QAAS,CAC5B,GAAIC,QAAU,KAAM,cACf,GAAI,OAAOA,SAAW,WAAYA,OAAOlB,WACzCmB,OAAOC,MAAM,CAACF,OAAQ,CAAEG,QAASrB,IAAK,EAC7C,CACF,CAAE"}