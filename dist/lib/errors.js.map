{"version":3,"sources":["../../src/lib/errors.ts"],"sourcesContent":["import * as Sentry from \"@sentry/nextjs\";\n\n/**\n * <span style=\"color: #32adff;\">Returns true if the given value is an\n * <span style=\"color: #ffd600;\">{@link Error}</span>.</span>\n *\n * Object that inherit from the <span style=\"color: #ffd600;\">{@link Error}</span> prototype are considered as errors.\n */\nexport const isError = (error: unknown): error is Error =>\n  error != null && typeof error === \"object\" && Error.prototype.isPrototypeOf(error);\n\n/**\n * <span style=\"color: #32adff;\">Returns true if the given value is an\n * <span style=\"color: #ffd600;\">{@link APIError}</span>.</span>\n *\n * Object that inherit from the <span style=\"color: #ffd600;\">{@link APIError}</span> prototype are considered as api\n * error.\n */\nexport const isAPIError = (error: unknown): error is APIError =>\n  isError(error) && APIError.prototype.isPrototypeOf(error);\n\n/**\n * <span style=\"color: #32adff;\">Returns true if the given value is an\n * <span style=\"color: #ffd600;\">{@link APIError}</span>, and its status code matches any of the ones provided.</span>\n *\n * Status code is the code returned from the faulty API call.\n */\nexport const isStatusError = (error: unknown, ...statuses: number[]): boolean =>\n  isAPIError(error) && statuses.includes(error.status);\n\n/**\n * <span style=\"color: #32adff;\">Wraps a <span style=\"color: #ffd600;\">{@link fetch}</span> call that returned a\n * non-OK response into a custom error.</span>\n *\n * The APIError class retains some properties from the <span style=\"color: #ffd600;\">{@link Response fetch response}</span>,\n * such as the status code and the response body.\n *\n * @example\n *  const response = await fetch(...);\n *  if (!response.ok) throw new APIError(response);\n */\nexport class APIError extends Error {\n  /**\n   * <span style=\"color: #32adff;\">Custom error name.</span>\n   *\n   * This can be used to discriminate the error type. This parameter is <b>safely overridable</b> from children classes.\n   */\n  name = \"APIError\";\n\n  /**\n   * <span style=\"color: #32adff;\">HTTP status code of the response.</span>\n   *\n   * Status code is the code returned from the faulty API call.\n   */\n  status: number;\n\n  private readonly responseText: Promise<string>;\n\n  constructor(response: Response) {\n    // Call the standard error constructor, with the status text as the message.\n    // This text is a generic status text, the actual error content is only accessible through the promise returned\n    // by the `text` method.\n    super(response.statusText);\n\n    this.status = response.status;\n    this.responseText = response.text().catch(() => \"no content\");\n  }\n\n  /**\n   * <span style=\"color: #32adff;\">Returns the parsed response body.</span>\n   *\n   * The body is initially parsed in the constructor, to prevent multiple reads of the body.\n   *\n   * This method can be <b>safely called multiple times</b>.\n   */\n  text = (): Promise<string> => this.responseText;\n}\n\n/**\n * <span style=\"color: #32adff;\">Process a generic error into a javascript\n * <span style=\"color: #ffd600;\">{@link Error}</span> object.</span>\n *\n * Parses any type that could be thrown, including strings and non-error objects.\n */\nexport const parseError = (error: unknown): Error | null => {\n  if (!error) return null;\n  if (typeof error === \"string\") return new Error(error);\n  return isError(error) ? error : new Error(JSON.stringify(error));\n};\n\nconst joinErrorsReducer = (acc: Error | null, sourceError: unknown): Error | null => {\n  const error = parseError(sourceError);\n\n  if (error == null) {\n    return acc;\n  }\n\n  if (acc == null) {\n    return error;\n  }\n\n  error.cause = acc;\n  return error;\n};\n\n/**\n * <span style=\"color: #32adff;\">Join multiple errors into a single <span style=\"color: #ffd600;\">{@link Error}</span>\n * object.</span>\n *\n * Errors are joined using their <span style=\"color: #ffd600;\">{@link Error.cause}</span> property, and automatically\n * converted to objects using <span style=\"color: #ffd600;\">{@link parseError}</span>.\n *\n * The parent error is the last one provided, while the first one is the deepest nested.\n */\nexport const joinErrors = (...errors: unknown[]): Error | null => errors.reduce(joinErrorsReducer, null);\n\nconst printWithIndent = (message: string): string =>\n  message\n    .split(\"\\n\")\n    .map((line) => \"\\t\" + line)\n    .join(\"\\n\");\n\n/**\n * <span style=\"color: #32adff;\">Convert an error into a string message.</span>\n *\n * Allows errors to be pretty printed, with little to no information loss.\n *\n * It automatically handles the following types of errors:\n * - <span style=\"color: #ffd600;\">{@link Error}</span>\n * - <span style=\"color: #ffd600;\">{@link APIError}</span>\n */\nexport const printError = async (error: unknown): Promise<string> => {\n  const parsedError = parseError(error);\n\n  if (parsedError == null) {\n    return \"\";\n  }\n\n  let message = parsedError.message;\n\n  if (isAPIError(parsedError)) {\n    const responseText = (message = `api call failed with status ${parsedError.status} (${message})`);\n    const responseBody = await parsedError.text().catch((error) => `failed to parse response body: ${error}`);\n\n    message = `${responseText}:\\n${printWithIndent(responseBody)}`;\n  }\n\n  if (parsedError.cause != null) {\n    message = `${message}\\ncaused by:\\n${printWithIndent(await printError(parsedError.cause))}`;\n  }\n\n  return `${parsedError.name || \"Error\"}: ${message}`;\n};\n\n/**\n * <span style=\"color: #32adff;\">Capture an error.</span>\n *\n * The error is automatically dispatched to the correct system, depending on the current environment defined by\n * <span style=\"color: #ffd600;\">{@link process.env.NODE_ENV}</span>.\n */\nexport const captureException = (error: unknown) => {\n  switch (process.env.NODE_ENV) {\n    case \"development\":\n      printError(error).then(console.error);\n      break;\n    case \"production\":\n      Sentry.captureException(error);\n      break;\n  }\n};\n"],"names":["Sentry","isError","error","Error","prototype","isPrototypeOf","isAPIError","APIError","isStatusError","statuses","includes","status","name","responseText","constructor","response","statusText","text","catch","parseError","JSON","stringify","joinErrorsReducer","acc","sourceError","cause","joinErrors","errors","reduce","printWithIndent","message","split","map","line","join","printError","parsedError","responseBody","captureException","process","env","NODE_ENV","then","console"],"mappings":"AAAA,UAAYA,WAAY,gBAAiB,AAQzC,QAAO,MAAMC,QAAU,AAACC,OACtBA,OAAS,MAAQ,OAAOA,QAAU,UAAYC,MAAMC,SAAS,CAACC,aAAa,CAACH,MAAO,AASrF,QAAO,MAAMI,WAAa,AAACJ,OACzBD,QAAQC,QAAUK,SAASH,SAAS,CAACC,aAAa,CAACH,MAAO,AAQ5D,QAAO,MAAMM,cAAgB,CAACN,MAAgB,GAAGO,WAC/CH,WAAWJ,QAAUO,SAASC,QAAQ,CAACR,MAAMS,MAAM,CAAE,AAavD,QAAO,MAAMJ,iBAAiBJ,MAM5BS,KAAO,UAAW,AAOlBD,CAAAA,MAAe,AAEf,CAAiBE,YAA8B,AAE/CC,aAAYC,QAAkB,CAAE,CAI9B,KAAK,CAACA,SAASC,UAAU,CAEzB,CAAA,IAAI,CAACL,MAAM,CAAGI,SAASJ,MAAM,AAC7B,CAAA,IAAI,CAACE,YAAY,CAAGE,SAASE,IAAI,GAAGC,KAAK,CAAC,IAAM,aAClD,CASAD,KAAO,IAAuB,IAAI,CAACJ,YAAY,AAAC,AAClD,CAQA,OAAO,MAAMM,WAAa,AAACjB,QACzB,GAAI,CAACA,MAAO,OAAO,KACnB,GAAI,OAAOA,QAAU,SAAU,OAAO,IAAIC,MAAMD,OAChD,OAAOD,QAAQC,OAASA,MAAQ,IAAIC,MAAMiB,KAAKC,SAAS,CAACnB,OAC3D,CAAE,CAEF,MAAMoB,kBAAoB,CAACC,IAAmBC,eAC5C,MAAMtB,MAAQiB,WAAWK,aAEzB,GAAItB,OAAS,KAAM,CACjB,OAAOqB,GACT,CAEA,GAAIA,KAAO,KAAM,CACf,OAAOrB,KACT,CAEAA,MAAMuB,KAAK,CAAGF,IACd,OAAOrB,KACT,CAWA,QAAO,MAAMwB,WAAa,CAAC,GAAGC,SAAoCA,OAAOC,MAAM,CAACN,kBAAmB,KAAM,CAEzG,MAAMO,gBAAkB,AAACC,SACvBA,QACGC,KAAK,CAAC,MACNC,GAAG,CAAC,AAACC,MAAS,IAAOA,MACrBC,IAAI,CAAC,KAWV,QAAO,MAAMC,WAAa,MAAOjC,QAC/B,MAAMkC,YAAcjB,WAAWjB,OAE/B,GAAIkC,aAAe,KAAM,CACvB,MAAO,EACT,CAEA,IAAIN,QAAUM,YAAYN,OAAO,CAEjC,GAAIxB,WAAW8B,aAAc,CAC3B,MAAMvB,aAAgBiB,QAAU,CAAC,4BAA4B,EAAEM,YAAYzB,MAAM,CAAC,EAAE,EAAEmB,QAAQ,CAAC,CAAC,CAChG,MAAMO,aAAe,MAAMD,YAAYnB,IAAI,GAAGC,KAAK,CAAC,AAAChB,OAAU,CAAC,+BAA+B,EAAEA,MAAM,CAAC,EAExG4B,QAAU,CAAC,EAAEjB,aAAa;AAAG,EAAEgB,gBAAgBQ,cAAc,CAAC,AAChE,CAEA,GAAID,YAAYX,KAAK,EAAI,KAAM,CAC7BK,QAAU,CAAC,EAAEA,QAAQ;;AAAc,EAAED,gBAAgB,MAAMM,WAAWC,YAAYX,KAAK,GAAG,CAAC,AAC7F,CAEA,MAAO,CAAC,EAAEW,YAAYxB,IAAI,EAAI,QAAQ,EAAE,EAAEkB,QAAQ,CAAC,AACrD,CAAE,AAQF,QAAO,MAAMQ,iBAAmB,AAACpC,QAC/B,OAAQqC,QAAQC,GAAG,CAACC,QAAQ,EAC1B,IAAK,cACHN,WAAWjC,OAAOwC,IAAI,CAACC,QAAQzC,KAAK,EACpC,KACF,KAAK,aACHF,OAAOsC,gBAAgB,CAACpC,OACxB,KACJ,CACF,CAAE"}