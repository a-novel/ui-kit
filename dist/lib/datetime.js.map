{"version":3,"sources":["../../src/lib/datetime.ts"],"sourcesContent":["/**\n * Number of milliseconds in a second.\n */\nexport const MILLISECONDS_IN_SECOND = 1000;\n\n/**\n * Number of milliseconds in a minute.\n */\nexport const MILLISECONDS_IN_MINUTE = MILLISECONDS_IN_SECOND * 60;\n\n/**\n * Number of milliseconds in an hour.\n */\nexport const MILLISECONDS_IN_HOUR = MILLISECONDS_IN_MINUTE * 60;\n\n/**\n * Number of milliseconds in a day.\n */\nexport const MILLISECONDS_IN_DAY = MILLISECONDS_IN_HOUR * 24;\n\n/**\n * <span style=\"color: #32adff;\">Return the timestamp for midnight this same day.</span>\n *\n * Use the TZoffset to adjust for timezone.\n */\nexport const getMidnightTimeInTZ = (date: Date, tzOffset: number) =>\n  date.getTime() -\n  date.getUTCMilliseconds() -\n  MILLISECONDS_IN_SECOND * date.getUTCSeconds() -\n  MILLISECONDS_IN_MINUTE * date.getUTCMinutes() -\n  MILLISECONDS_IN_HOUR * date.getUTCHours() +\n  // Accessors (getHours, getMinutes, etc) use local timezone, not the one defined by the date.\n  // Above compute will give the time for midnight of that day in UTC. If we want midnight in the local timezone, we\n  // need to add the offset.\n  tzOffset * MILLISECONDS_IN_MINUTE;\n\n/**\n * <span style=\"color: #32adff;\">Returns the human number of days between two dates.</span>\n *\n * A 1-day difference means that <b>date 'b' happened anytime\n * between 00:00:00 and 23:59:59 on the day before date 'a'</b>, rather than a strict 24 hours difference.\n *\n * Midnight is defined in the date 'a' timezone, if both are different.\n */\nexport const daysDiff = (a: Date, b: Date): number =>\n  // - If date 'b' occurs less than 24h after midnight of date 'a', then return 0 (day diff in range ]-1, 0]).\n  // - if date 'b' occurs before midnight of date 'a', then return x (day diff in range ]0, +inf]).\n  // - If date 'b' occurs more' than 24h after midnight of date 'a', then return -x (day diff in range [-inf, 0[).\n  //\n  // The or condition is to prevent -0 as a value.\n  Math.ceil(\n    (getMidnightTimeInTZ(a, a.getTimezoneOffset()) - getMidnightTimeInTZ(b, a.getTimezoneOffset())) /\n      MILLISECONDS_IN_DAY,\n  ) || 0;\n\nexport interface DateTime {\n  /**\n   * The time associated to the date, formatted for proper display.\n   */\n  time: string;\n  /**\n   * <span style=\"color: #32adff;\">The date associated to the date, formatted for proper display.</span>\n   *\n   * Only provided when necessary (if the date is not today).\n   */\n  date?: string;\n}\n\n/**\n * <span style=\"color: #32adff;\">Return date and time values formatted for display.</span>\n *\n * The date value is optionally returned, if the date does not match the current day.\n */\nexport const displayTime = (sourceRaw: Date | number): DateTime => {\n  const source = new Date(sourceRaw);\n  const today = new Date();\n\n  const isToday = daysDiff(source, today) === 0;\n\n  const time = source.toLocaleTimeString(undefined, { hour: \"numeric\", minute: \"numeric\", second: undefined });\n  if (isToday) {\n    return { time };\n  }\n\n  const date = source.toLocaleDateString(undefined, { year: \"numeric\", day: \"numeric\", month: \"long\" });\n  return { date, time };\n};\n"],"names":["MILLISECONDS_IN_SECOND","MILLISECONDS_IN_MINUTE","MILLISECONDS_IN_HOUR","MILLISECONDS_IN_DAY","getMidnightTimeInTZ","date","tzOffset","getTime","getUTCMilliseconds","getUTCSeconds","getUTCMinutes","getUTCHours","daysDiff","a","b","Math","ceil","getTimezoneOffset","displayTime","sourceRaw","source","Date","today","isToday","time","toLocaleTimeString","undefined","hour","minute","second","toLocaleDateString","year","day","month"],"mappings":"AAGA,OAAO,MAAMA,uBAAyB,GAAK,AAK3C,QAAO,MAAMC,uBAAyBD,uBAAyB,EAAG,AAKlE,QAAO,MAAME,qBAAuBD,uBAAyB,EAAG,AAKhE,QAAO,MAAME,oBAAsBD,qBAAuB,EAAG,AAO7D,QAAO,MAAME,oBAAsB,CAACC,KAAYC,WAC9CD,KAAKE,OAAO,GACZF,KAAKG,kBAAkB,GACvBR,uBAAyBK,KAAKI,aAAa,GAC3CR,uBAAyBI,KAAKK,aAAa,GAC3CR,qBAAuBG,KAAKM,WAAW,GAIvCL,SAAWL,sBAAuB,AAUpC,QAAO,MAAMW,SAAW,CAACC,EAASC,IAMhCC,KAAKC,IAAI,CACP,AAACZ,CAAAA,oBAAoBS,EAAGA,EAAEI,iBAAiB,IAAMb,oBAAoBU,EAAGD,EAAEI,iBAAiB,GAAE,EAC3Fd,sBACC,CAAE,AAoBT,QAAO,MAAMe,YAAc,AAACC,YAC1B,MAAMC,OAAS,IAAIC,KAAKF,WACxB,MAAMG,MAAQ,IAAID,KAElB,MAAME,QAAUX,SAASQ,OAAQE,SAAW,EAE5C,MAAME,KAAOJ,OAAOK,kBAAkB,CAACC,UAAW,CAAEC,KAAM,UAAWC,OAAQ,UAAWC,OAAQH,SAAU,GAC1G,GAAIH,QAAS,CACX,MAAO,CAAEC,IAAK,CAChB,CAEA,MAAMnB,KAAOe,OAAOU,kBAAkB,CAACJ,UAAW,CAAEK,KAAM,UAAWC,IAAK,UAAWC,MAAO,MAAO,GACnG,MAAO,CAAE5B,KAAMmB,IAAK,CACtB,CAAE"}