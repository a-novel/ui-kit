export class Normalizer{params;filter;constructor(params){this.params=params;if(params.filter)this.filter=new RegExp(params.filter,"gu")}exec=(value,params={})=>{const actualParams={...this.params,...params};const actualFilter=actualParams.filter?new RegExp(actualParams.filter,"gu"):this.filter;if(actualParams.trim){value=value.trim()}if(actualParams.forceCase){value=actualParams.forceCase==="lower"?value.toLowerCase():value.toUpperCase()}if(actualParams.separators){let normalizedString="";let lastCharacterWasSeparator=!actualParams.keepLeadingSeparator;while(value!==""){const initialSeparator=actualParams.separators?.find(separator=>value.startsWith(separator))??"";const addToNormalizedString=lastCharacterWasSeparator&&initialSeparator!==""?"":initialSeparator||value[0];normalizedString+=addToNormalizedString;value=value.slice(initialSeparator.length||1);lastCharacterWasSeparator=initialSeparator!==""}value=normalizedString}if(actualFilter){value=(value.match(actualFilter)||[]).join("")}if(actualParams.max){value=value.slice(0,this.params.max)}return value}}export const getDisplayName=user=>{if(user.username){return user.username}if(user.firstName&&user.lastName){return`${user.firstName} ${user.lastName}`}if(user.firstName){return user.firstName}if(user.lastName){return user.lastName}return""};
//# sourceMappingURL=string.js.map