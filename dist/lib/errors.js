import*as Sentry from"@sentry/nextjs";export const isError=error=>error!=null&&typeof error==="object"&&Error.prototype.isPrototypeOf(error);export const isAPIError=error=>isError(error)&&APIError.prototype.isPrototypeOf(error);export const isStatusError=(error,...statuses)=>isAPIError(error)&&statuses.includes(error.status);export class APIError extends Error{name="APIError";status;responseText;constructor(response){super(response.statusText);this.status=response.status;this.responseText=response.text().catch(()=>"no content")}text=()=>this.responseText}export const parseError=error=>{if(!error)return null;if(typeof error==="string")return new Error(error);return isError(error)?error:new Error(JSON.stringify(error))};const joinErrorsReducer=(acc,sourceError)=>{const error=parseError(sourceError);if(error==null){return acc}if(acc==null){return error}error.cause=acc;return error};export const joinErrors=(...errors)=>errors.reduce(joinErrorsReducer,null);const printWithIndent=message=>message.split("\n").map(line=>"	"+line).join("\n");export const printError=async error=>{const parsedError=parseError(error);if(parsedError==null){return""}let message=parsedError.message;if(isAPIError(parsedError)){const responseText=message=`api call failed with status ${parsedError.status} (${message})`;const responseBody=await parsedError.text().catch(error=>`failed to parse response body: ${error}`);message=`${responseText}:
${printWithIndent(responseBody)}`}if(parsedError.cause!=null){message=`${message}
caused by:
${printWithIndent(await printError(parsedError.cause))}`}return`${parsedError.name||"Error"}: ${message}`};export const captureException=error=>{switch(process.env.NODE_ENV){case"development":printError(error).then(console.error);break;case"production":Sentry.captureException(error);break}};
//# sourceMappingURL=errors.js.map